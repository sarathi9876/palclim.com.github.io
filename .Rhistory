install.packages(c(
"shiny",       # For interactive UI
"plotly",      # For interactive plots
"ggplot2",     # For plotting
"dplyr",       # For data manipulation
"readxl",      # For reading Excel files
"openxlsx"     # For writing Excel files
))
# Chunk 1: setup
library(shiny)
library(readxl)
library(DT)
library(dplyr)
# Chunk 2: ui
ui <- fluidPage(
titlePanel("δ18O File Input Viewer"),
div(class = "fixed-input-panel",
fluidRow(
column(4, fileInput("main_input", "Upload Age–δ18O File", accept = ".xlsx")),
column(4, fileInput("sea_level_file", "Upload Sea Level File", accept = ".xlsx")),
column(4, fileInput("temp_file", "Upload Temperature File", accept = ".xlsx"))
)
),
tabsetPanel(
tabPanel("Main File", DTOutput("main_table")),
tabPanel("Sea Level File", DTOutput("sea_table")),
tabPanel("Temperature File", DTOutput("temp_table")),
tabPanel("Interpolated Sea Level for δ18O Ages", DTOutput("interpolated_table")),
tabPanel("Matched Sea Level (Exact Match Only)", DTOutput("matched_table"))
)
)
server <- function(input, output, session) {
get_clean_data <- function(file_input, new_names) {
req(file_input)
df <- read_excel(file_input$datapath, col_names = FALSE)
validate(need(ncol(df) >= 2, "File must contain at least two columns."))
df <- df[, 1:2]
colnames(df) <- new_names
df <- df %>% mutate(across(everything(), ~ suppressWarnings(as.numeric(.))))
df <- na.omit(df)
return(df)
}
output$main_table <- renderDT({
get_clean_data(input$main_input, c("age", "d18o"))
})
output$sea_table <- renderDT({
get_clean_data(input$sea_level_file, c("age", "sealevel"))
})
output$temp_table <- renderDT({
get_clean_data(input$temp_file, c("age", "temp"))
})
output$interpolated_table <- renderDT({
req(input$main_input, input$sea_level_file)
d18o_data <- get_clean_data(input$main_input, c("age", "d18o"))
sea_data <- get_clean_data(input$sea_level_file, c("age", "sealevel"))
interpolated_sea <- approx(x = sea_data$age, y = sea_data$sealevel, xout = d18o_data$age, rule = 2)
result <- data.frame(age = d18o_data$age, d18o = d18o_data$d18o, interpolated_sealevel = interpolated_sea$y)
datatable(result)
})
output$matched_table <- renderDT({
req(input$main_input, input$sea_level_file)
d18o_data <- get_clean_data(input$main_input, c("age", "d18o"))
sea_data <- get_clean_data(input$sea_level_file, c("age", "sealevel"))
matched <- left_join(d18o_data, sea_data, by = "age")
matched <- matched[!is.na(matched$sealevel), ]
datatable(matched)
})
}
install.packages("rsconnect")
rsconnect::setAccountInfo(name='partha679', token='E00085BEFEA5099104298B061BE8FD48', secret='dC6dW6iWVlxGB3n9W90hheWUtfu4Az45wtZnmqLA')
rsconnect::deployApp(appName = "18osl")
rsconnect::deployApp(appName = "18osl")
rsconnect::deployApp(appName = "18osl")
file.remove(".RData")
rsconnect::deployApp(appName = "18osl")
rsconnect::deployApp(appName = "18osl")
list.files()
list.files()
rmarkdown::render("18Osl.Rmd")
rsconnect::deployApp(appDir = ".", appFiles = c("18Osl.html"), appName = "18osl")
file.remove(".RData")
rsconnect::deployApp(appName = "18osl")
rsconnect::deployApp(appName = "18osl")
rsconnect::deployApp(appDir = ".", appFiles = c("18Osl.html"), appName = "18osl")
rmarkdown::run("18Osl.Rmd")
rsconnect::deployApp(appDir = ".", appName = "18osl")
renv::snapshot(prompt = FALSE, force = TRUE)
install.packages(c("MASS", "mgcv"))
renv::snapshot(prompt = FALSE, force = TRUE)
rsconnect::deployApp(appName = "18osl")
rsconnect::deployApp(appName = "18osl")
rsconnect::deployApp(appDir = ".", appFiles = c("18Osl.html"), appName = "18osl")
install.packages("rsconnect")
rsconnect::setAccountInfo(name='partha679', token='E00085BEFEA5099104298B061BE8FD48', secret='dC6dW6iWVlxGB3n9W90hheWUtfu4Az45wtZnmqLA')
rsconnect::deployApp()
# Update the lockfile to match installed packages
renv::snapshot()
rsconnect::deployApp()
install.packages("fansi")
renv::snapshot()
rsconnect::deployApp()
rmarkdown::run("18Osl.Rmd")
rsconnect::deployApp(appName = "18osl")
rmarkdown::render_site()
# Default GitHub account (partha679)
Host github.com
git remote set-url origin git@github-sarathi:sarathi9876/palclim.com.github.io.git
